<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>pdbonly</DebugType>
    <RepositoryUrl>https://github.com/Nukepayload2/Nukepayload2.CompilerServices.InteriorPointer.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageProjectUrl>https://github.com/Nukepayload2/Nukepayload2.CompilerServices.InteriorPointer</PackageProjectUrl>
    <PackageLicenseUrl>https://github.com/Nukepayload2/Nukepayload2.CompilerServices.InteriorPointer/blob/master/LICENSE</PackageLicenseUrl>
    <Description>Provides functionality for manipulating interior pointers with VB.
- Convert ByRef to interior pointer, or convert interior pointer back to ByRef.
- Load or store unmanaged values indirectly.
- No extra dependencies.
- Supports addition, subtraction, increment, decrement, equality, inequality, greater than, greater than or equal, less than, and less than or equal operator.
- Provides helper types and functions for easier code conversion from C#, C++, or Classic VB to VB.NET.
- Runtime-check for the use of InteriorPointer(Of T) is enabled.

Commonly used types:
Nukepayload2.CompilerServices.InteriorPointer
Nukepayload2.CompilerServices.Unsafe.InteriorPointer(Of T)
Nukepayload2.CompilerServices.Unsafe.UnsafeOperators
Nukepayload2.CompilerServices.Unsafe.PinnedPointer(Of T)
Nukepayload2.CompilerServices.Unsafe.TransientPointer(Of T)</Description>
    <PackageId>Nukepayload2.CompilerServices.InteriorPointer</PackageId>
    <Authors>Nukepayload2</Authors>
    <Product>Nukepayload2.CompilerServices.InteriorPointer</Product>
    <PackageTags>interior pointer unsafe vb vbnet byref memory varptr strptr objptr</PackageTags>
    <Version>1.1.3-beta8</Version>
    <PackageReleaseNotes>Added some useful static casts</PackageReleaseNotes>
    <Copyright>Copyright 2018 Nukepayload2</Copyright>
    <AssemblyVersion>1.1.3.0</AssemblyVersion>
    <FileVersion>1.1.3.0</FileVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <RemoveIntegerChecks>true</RemoveIntegerChecks>
    <DocumentationFile>Nukepayload2.CompilerServices.xml</DocumentationFile>
    <NoWarn>42017,42018,42019,42020,42021,42022,42032,42036</NoWarn>
    <WarningsAsErrors />
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>Nukepayload2.CompilerServices.xml</DocumentationFile>
    <NoWarn>42017,42018,42019,42020,42021,42022,42032,42036</NoWarn>
    <WarningsAsErrors />
  </PropertyGroup>

  <ItemGroup>
    <IL Include="**\*.il" Exclude="**\obj\**\*.il;**\bin\**\*.il" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Nukepayload2.CodeAnalysis.ExtendRestrictedTypes" Version="1.0.2-beta">
      <IncludeAssets>analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <Target Name="ProcessILAfterCompile" AfterTargets="Compile">
    <CallTarget Targets="InitializeIL; CoreDecompile; CoreCompileIL" />
  </Target>
  <Target Name="InitializeIL">
    <PropertyGroup>
      <ILFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).il', ' ')</ILFile>
      <ILResourceFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).res', ' ')</ILResourceFile>
    </PropertyGroup>
  </Target>
  <PropertyGroup>
    <NetFxToolsFolder>C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\</NetFxToolsFolder>
    <SystemNetFxToolsFolder>C:\Windows\Microsoft.NET\Framework\v4.0.30319\</SystemNetFxToolsFolder>
    <ILAsmExe>$(SystemNetFxToolsFolder)ilasm.exe</ILAsmExe>
    <ILDAsmExe>$(NetFxToolsFolder)ildasm.exe</ILDAsmExe>
  </PropertyGroup>
  <Target Name="CoreDecompile" Inputs="@(IntermediateAssembly)" Outputs="$(ILFile)" Condition=" Exists ( @(IntermediateAssembly) ) ">
    <PropertyGroup>
      <ILDasm>"$(ILDAsmExe)" /nobar /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <Exec Command="$(ILDasm)" />
    <ItemGroup>
      <FileWrites Include="$(ILFile)" />
      <FileWrites Include="$(ILResourceFile)" />
    </ItemGroup>
    <PropertyGroup>
      <ILSource>$([System.IO.File]::ReadAllText($(ILFile)))</ILSource>
      <Replacement>// method ${method} forwardref removed for IL import</Replacement>
      <Pattern>\.method [^{}]+ cil managed forwardref[^}]+} // end of method (?&lt;method&gt;[^ \r\t\n]+)</Pattern>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
      <Pattern>\.method [^{}]+ cil managed[^\a]+"extern was not given a DllImport attribute"[^}]+} // end of method (?&lt;method&gt;[^ \r\t\n]+)</Pattern>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
    </PropertyGroup>
    <WriteLinesToFile File="$(ILFile)" Lines="$(ILSource)" Overwrite="true" />
    <PropertyGroup>
      <ILSource />
    </PropertyGroup>
    <Delete Files="@(IntermediateAssembly)" />
  </Target>
  <Target Name="CoreCompileIL" Inputs="@(IL)" Outputs="@(IntermediateAssembly)">
    <PropertyGroup>
      <ILAsm>"$(ILAsmExe)" /nologo /quiet /output:@(IntermediateAssembly->'"%(FullPath)"', ' ')</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(FileAlignment)' != '' ">
      <ILAsm>$(ILAsm) /alignment=$(FileAlignment)</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(BaseAddress)' != '' ">
      <ILAsm>$(ILAsm) /base=$(BaseAddress)</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OutputType)' == 'Library' ">
      <ILAsm>$(ILAsm) /dll</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(DebugType)' == 'pdbonly' ">
      <ILAsm>$(ILAsm) /pdb</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(DebugType)' == 'full' ">
      <ILAsm>$(ILAsm) /debug</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Optimize)' == 'true' ">
      <ILAsm>$(ILAsm) /optimize</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Platform)' == 'x64' ">
      <ILAsm>$(ILAsm) /pe64 /x64</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Platform)' == 'Itanium' ">
      <ILAsm>$(ILAsm) /pe64 /itanium</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(AssemblyOriginatorKeyFile)' != '' ">
      <ILAsm>$(ILAsm) /key:"$(AssemblyOriginatorKeyFile)"</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(ILResourceFile)' ) ">
      <ILAsm>$(ILAsm) /resource:"$(ILResourceFile)"</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(ILFile)' ) ">
      <ILAsm>$(ILAsm) "$(ILFile)"</ILAsm>
    </PropertyGroup>
    <Exec Command="$(ILAsm) @(IL->'&quot;%(FullPath)&quot;', ' ')" />
    <ItemGroup>
      <FileWrites Include="@(IntermediateAssembly->'%(RootDir)%(Directory)DesignTimeResolveAssemblyReferencesInput.cache', ' ')" />
    </ItemGroup>
    <Touch Files="$(ILFile)" />
  </Target>

</Project>
